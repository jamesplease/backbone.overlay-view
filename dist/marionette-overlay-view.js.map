{"version":3,"sources":["marionette-overlay-view.js","src/marionette-overlay-view.js"],"names":[],"mappings":"AAAA,AAAC,CAAA,UAAU,MAAM,EAAE,OAAO,EAAE;AAC1B,SAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,GACvH,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,qBAAqB,CAAC,EAAE,OAAO,CAAC,GACrF,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;CACxC,CAAA,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE;AAAE,cAAY,CAAC;;ACFrC,MAAI,WAAA,GAAc,EAAA,CAAG,QAAA,CAAS,MAAA,CAAO;AACnC,aAAA,EAAW,gCAAA;;;;AAIX,YAAA,EAAU,KAAA;;;AAGV,UAAA,EAAQ;AACN,WAAA,EAAO,cAAA;KACX;;;;AAIE,gBAAY,EAAA,wBAAG;AACb,aAAO,IAAA,CAAK,aAAA,CAAA;KAChB;;;AAGE,WAAO,EAAA,mBAAG;AACR,UAAI,IAAA,CAAK,aAAA,EAAe;AAAE,eAAA;OAAA;AAC1B,UAAA,CAAK,aAAA,CAAc,gBAAA,CAAA,CAAA;AACnB,UAAA,CAAK,aAAA,GAAgB,IAAA,CAAA;AACrB,UAAA,CAAK,GAAA,CAAI,WAAA,CAAY,mBAAA,CAAA,CAAA;AACrB,UAAA,CAAK,aAAA,CAAc,SAAA,CAAA,CAAA;AACnB,aAAO,IAAA,CAAA;KACX;;;AAGE,QAAI,EAAA,gBAAG;AACL,UAAI,CAAC,IAAA,CAAK,aAAA,EAAe;AAAE,eAAA;OAAA;AAC3B,UAAA,CAAK,aAAA,CAAc,aAAA,CAAA,CAAA;AACnB,UAAA,CAAK,aAAA,GAAgB,KAAA,CAAA;AACrB,UAAA,CAAK,GAAA,CAAI,QAAA,CAAS,mBAAA,CAAA,CAAA;AAClB,UAAA,CAAK,aAAA,CAAc,MAAA,CAAA,CAAA;AACnB,aAAO,IAAA,CAAA;KACX;;;AAGE,iBAAA,EAAe,KAAA;;;;;AAKf,gBAAY,EAAA,sBAAC,CAAA,EAAG;AACd,UAAI,WAAA,GAAc,CAAA,CAAE,MAAA,KAAW,CAAA,CAAE,aAAA,CAAA;AACjC,UAAI,SAAA,GAAY,WAAA,GAAc,OAAA,GAAU,aAAA,CAAA;AACxC,UAAA,CAAK,aAAA,CAAc,SAAA,CAAA,CAAA;;;AAGnB,UAAI,WAAA,IAAe,IAAA,CAAK,YAAA,EAAA,EAAgB;AACtC,YAAA,CAAK,IAAA,EAAA,CAAA;OACX;KACA;GACA,CAAA,CAAA;;AAxDA,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA;;AAAA,MAAA,uBAAA,GAAA,WAAA,CAAA;;ADkEE,SAAO,uBAAuB,CAAC;CAEhC,CAAC,CAAE","file":"marionette-overlay-view.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone.marionette')) :\n  typeof define === 'function' && define.amd ? define(['backbone.marionette'], factory) :\n  global.OverlayView = factory(global.Mn)\n}(this, function (Mn) { 'use strict';\n\n  var OverlayView = Mn.ItemView.extend({\n    className: 'overlay-view overlay-view-hide',\n\n    // The OverlayView doesn't need a template: it's simply an element\n    // that covers up the entirety of the application\n    template: false,\n\n    // Convert DOM click events into BB Events\n    events: {\n      click: '_handleClick'\n    },\n\n    // Returns a Boolean indicating whether or not the view is currently\n    // displaying\n    isDisplaying() {\n      return this._isDisplaying;\n    },\n\n    // Show the overlay\n    display() {\n      if (this._isDisplaying) { return; }\n      this.triggerMethod('before:display');\n      this._isDisplaying = true;\n      this.$el.removeClass('overlay-view-hide');\n      this.triggerMethod('display');\n      return this;\n    },\n\n    // Hide the overlay\n    hide() {\n      if (!this._isDisplaying) { return; }\n      this.triggerMethod('before:hide');\n      this._isDisplaying = false;\n      this.$el.addClass('overlay-view-hide');\n      this.triggerMethod('hide');\n      return this;\n    },\n\n    // Whether or not the overlayView is displayed\n    _isDisplaying: false,\n\n    // Emit the `click` event if the overlay is clicked directly.\n    // Otherwise, emit a `click:child` event. Then, hide the view\n    // if it is displayed.\n    _handleClick(e) {\n      var clickedSelf = e.target === e.currentTarget;\n      var eventName = clickedSelf ? 'click' : 'click:child';\n      this.triggerMethod(eventName);\n\n      // Hide the view, if it's being displayed\n      if (clickedSelf && this.isDisplaying()) {\n        this.hide();\n      }\n    }\n  });\n\n  Mn.OverlayView = OverlayView;\n\n  var marionette_overlay_view = OverlayView;\n\n  return marionette_overlay_view;\n\n}));\n","import Mn from 'backbone.marionette';\n\nvar OverlayView = Mn.ItemView.extend({\n  className: 'overlay-view overlay-view-hide',\n\n  // The OverlayView doesn't need a template: it's simply an element\n  // that covers up the entirety of the application\n  template: false,\n\n  // Convert DOM click events into BB Events\n  events: {\n    click: '_handleClick'\n  },\n\n  // Returns a Boolean indicating whether or not the view is currently\n  // displaying\n  isDisplaying() {\n    return this._isDisplaying;\n  },\n\n  // Show the overlay\n  display() {\n    if (this._isDisplaying) { return; }\n    this.triggerMethod('before:display');\n    this._isDisplaying = true;\n    this.$el.removeClass('overlay-view-hide');\n    this.triggerMethod('display');\n    return this;\n  },\n\n  // Hide the overlay\n  hide() {\n    if (!this._isDisplaying) { return; }\n    this.triggerMethod('before:hide');\n    this._isDisplaying = false;\n    this.$el.addClass('overlay-view-hide');\n    this.triggerMethod('hide');\n    return this;\n  },\n\n  // Whether or not the overlayView is displayed\n  _isDisplaying: false,\n\n  // Emit the `click` event if the overlay is clicked directly.\n  // Otherwise, emit a `click:child` event. Then, hide the view\n  // if it is displayed.\n  _handleClick(e) {\n    var clickedSelf = e.target === e.currentTarget;\n    var eventName = clickedSelf ? 'click' : 'click:child';\n    this.triggerMethod(eventName);\n\n    // Hide the view, if it's being displayed\n    if (clickedSelf && this.isDisplaying()) {\n      this.hide();\n    }\n  }\n});\n\nMn.OverlayView = OverlayView;\n\nexport default OverlayView;\n"],"sourceRoot":"/source/"}